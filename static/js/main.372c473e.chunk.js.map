{"version":3,"sources":["helpers/index.js","components/CongratsComponent/Congrats.jsx","components/GuessedWordComponent/GuessedWords.jsx","actions/index.js","components/InputComponent/Input.jsx","components/GiveUpButtonComponent/GiveUp.jsx","components/NewWordComponent/NewWord.jsx","components/SecretWordLength/SecretWordLength.jsx","components/UserEntersSecretWord/UserEntryButton/UserEntryButton.jsx","components/UserEntersSecretWord/UserEntry.jsx","components/ErrorComponent/Error.jsx","App.js","reportWebVitals.js","reducers/index.js","reducers/successReducer.js","reducers/guessedWordReducer.js","reducers/secretWordReducer.js","reducers/giveupGuessReducer.js","reducers/userEnteredSecretWordReducer.js","reducers/serverErrorReducer.js","configureStore.js","index.js"],"names":["getLetterMatchCount","guessedWord","secretWord","secretLetterSet","Set","split","guessedLetterSet","filter","letter","has","length","module","exports","Congrats","success","className","defaultProps","GuessedWord","content","guessedWords","guessedWordsRow","map","index","letterMatchCount","actionTypes","RESET_GAME","CORRECT_GUESS","GUESS_WORD","SET_SECRET_WORD","GIVEUP_GUESS","USER_IS_ENTERING","USER_ENTERED","SERVER_ERROR","loadSecretWord","dispatch","axios","get","then","response","type","payload","data","catch","UnconnectedInputComp","props","state","currentGuess","handleSubmit","bind","e","preventDefault","guessWord","this","setState","giveUpGuess","contents","action","placeholder","value","onChange","event","target","onClick","Component","actions","getState","guessedLettersCount","connect","GiveUp","NewWordButton","display","reloadWebPage","SecretWordLength","UserEntryButton","userEntryBtnAction","UserEntry","inputRef","createRef","formAction","current","name","ref","React","ErrorComponent","UnconnectedApp","getSecretWord","userInput","setUserEnteredSecretWord","setUserSecretWordEntering","serverError","displayingSecretWordLength","Error","NewWord","Input","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","middleWares","ReduxThunk","applyMiddleware","createStore","rootReducer","require","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.372c473e.chunk.js","sourcesContent":["/**\n * @param  {} guessedWrd\n * @param  {} secretWord\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const getLetterMatchCount = (guessedWord, secretWord) => {\n  const secretLetterSet = new Set(secretWord.split(''));\n  const guessedLetterSet = new Set(guessedWord.split(''));\n  return [...secretLetterSet].filter((letter) => guessedLetterSet.has(letter)).length;\n};\n\nmodule.exports = {\n  getLetterMatchCount,\n};\n","import React from 'react';\nimport { bool } from 'prop-types';\n\n/**\n * Functional react component for congratulatory message.\n * @function\n * @param {object} props - React props\n * @returns {JSX.Element} - Renderend Component (or null if `success` prop is false)\n */\n\nconst Congrats = ({ success }) => (success ? (\n  <div data-test=\"component-congrats\" className=\"container\">\n    <span data-test=\"congrats-message\" className=\"alert alert-success\">\n      Congratulations! You guessed the word!\n    </span>\n  </div>\n) : (<div data-test=\"component-congrats\" />));\nCongrats.propTypes = {\n  success: bool,\n};\nCongrats.defaultProps = {\n  success: false,\n};\nexport default Congrats;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuessedWord = ({ guessedWords }) => {\n  let content;\n  if (guessedWords.length === 0) {\n    content = (\n      <p data-test=\"guessed-word-instruction\">\n        Try to guess the secret word!\n      </p>\n    );\n  } else {\n    const guessedWordsRow = guessedWords.map(\n      ({ guessedWord, letterMatchCount }, index) => (\n        <tr data-test=\"guessed-word\" key={guessedWord}>\n          <td>{index + 1}</td>\n          <td>{guessedWord}</td>\n          <td>{letterMatchCount}</td>\n        </tr>\n      ),\n    );\n\n    content = (\n      <div data-test=\"guessed-words-table\" className=\"container\">\n        <h2>Guessed Words</h2>\n        <table className=\"table table-sm\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>#</th>\n              <th>Guess</th>\n              <th>Matching Letters</th>\n            </tr>\n          </thead>\n          <tbody>\n            {guessedWordsRow}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  return (\n    <div data-test=\"component-guessed-words\">\n      {content}\n      <div data-test=\"guessed-words-count\">\n        {`Total guessed words: ${guessedWords.length}`}\n      </div>\n    </div>\n  );\n};\nGuessedWord.propTypes = {\n  guessedWords: PropTypes.arrayOf(\n    PropTypes.shape({\n      guessedWord: PropTypes.string.isRequired,\n      letterMatchCount: PropTypes.number.isRequired,\n    }),\n  ),\n};\n\nexport default GuessedWord;\n","import axios from 'axios';\n\nimport { getLetterMatchCount } from '../helpers/index';\n\nconst actionTypes = {\n  RESET_GAME: 'RESET_GAME',\n  CORRECT_GUESS: 'CORRECT_GUESS',\n  GUESS_WORD: 'GUESS_WORD',\n  SET_SECRET_WORD: 'SET_SECRET_WORD',\n  GIVEUP_GUESS: 'GIVEUP_GUESS',\n  USER_IS_ENTERING: 'USER_IS_ENTERING',\n  USER_ENTERED: 'USER_ENTERED',\n  SERVER_ERROR: 'SERVER_ERROR',\n};\n\n/**\n * Returns Redux Thunk function that dispatched GUESS_WORD action\n * It also launches CORRECT_GUESS action conditionally, if the secret word is guessed\n * @function guessWord\n * @param  {string} guessedWord\n * @returns {function} - Redux Thunk dispatcher function.\n */\nexport const guessWord = (guessedWord) => (dispatch, getState) => {\n  const { secretWord } = getState();\n  const guessedLettersCount = getLetterMatchCount(guessedWord, secretWord);\n  dispatch({\n    type: actionTypes.GUESS_WORD,\n    payload: { guessedWord, letterMatchCount: guessedLettersCount },\n  });\n  if (secretWord === guessedWord) {\n    dispatch({\n      type: actionTypes.CORRECT_GUESS,\n    });\n  }\n};\n\n/**\n * It makes an API call to the local web server which returns the new secret word.\n * If no secret word is returned and response.data is \"\" then default value is set as \"Party\".\n * @function loadSecretWord\n * @param {*} dispatch - Redux thunk dispatcher object function\n * @returns {object} - Redux thunk dispatch function\n */\nconst loadSecretWord = (dispatch) => axios.get('http://localhost:3030/')\n  .then((response) => {\n    dispatch(\n      {\n        type: actionTypes.SET_SECRET_WORD,\n        payload: response.data || 'Party',\n      },\n    );\n  })\n  .catch(() => { dispatch({ type: actionTypes.SERVER_ERROR }); });\n\n// Axios request to get a random secret word from the server\nexport const getSecretWord = () => loadSecretWord;\n\n/**\n * It sets the success props to true when the correct guess is made.\n * @function correctGuess\n * @returns {object} - Redux thunk dispatch function\n */\nexport const correctGuess = () => ({ type: actionTypes.CORRECT_GUESS });\n\n/**\n * It resets the application with a new secret word to guess.\n * It sets the success status to false leaving the guessedWords as it is.\n * Alternatively: It can also be approached with reloading the whole website.\n *  by returning window.location.reload.\n * @function reloadWebPage\n * @param {*} dispatch - Redux thunk dispatcher object function\n * @returns {object} - Redux thunk dispatch function\n */\nexport const reloadWebPage = () => (dispatch) => {\n  dispatch({ type: actionTypes.RESET_GAME });\n  return loadSecretWord(dispatch);\n};\n\n/**\n * It sets the giveUpGuess piece of state to true when giveUp button is clicked.\n * @function giveUpGuess\n * @param {*} dispatch - Redux thunk dispatcher object function\n * @returns {object} - Redux thunk dispatch function\n */\nexport const giveUpGuess = () => (dispatch) => {\n  dispatch({ type: actionTypes.GIVEUP_GUESS });\n  return loadSecretWord(dispatch);\n};\n\n/**\n * It sets the User Entered Secret Word to the secretWord piece of state.\n * It also sets the USER_ENTERED action indicating the user has completed filling the input.\n * @function setUserEnteredSecretWord\n * @param {bool} secretWord\n * @param  {actionTypes.SET_SECRET_WORD} =>{dispatch({type - Redux thunk dispatcher object function\n * @returns {object} - Redux thunk dispatch function\n */\nexport const setUserEnteredSecretWord = (secretWord) => (dispatch) => {\n  dispatch({ type: actionTypes.SET_SECRET_WORD, payload: secretWord });\n  dispatch({ type: actionTypes.USER_ENTERED });\n};\n\n/**\n * @function setUserSecretWordEntering\n * @param  {} =>(dispatch - Redux thunk dispatcher object function.\n * @returns - Redux thunk dispatcher function - setting the userInput to 'is_entering'\n */\nexport const setUserSecretWordEntering = () => (dispatch) => dispatch(\n  { type: actionTypes.USER_IS_ENTERING },\n);\n\nexport default actionTypes;\n","/* eslint-disable class-methods-use-this */\n/* eslint-disable react/prefer-stateless-function */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { giveUpGuess, guessWord } from '../../actions';\n\n/**\n * @function mapStateToProps\n * @param {*} state - has the state of the entire application.\n */\nconst mapStateToProps = ({ success }) => ({ success });\n\nexport class UnconnectedInputComp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentGuess: '',\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    // eslint-disable-next-line no-shadow\n    const { guessWord } = this.props;\n    const { currentGuess } = this.state;\n    if (currentGuess && currentGuess.length > 0) {\n      guessWord(currentGuess);\n      this.setState({ currentGuess: '' });\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line no-shadow\n    const { success, giveUpGuess } = this.props;\n    const { currentGuess } = this.state;\n    const contents = success ? null : (\n      <form\n        action=\"\"\n        data-test=\"component-form-container\"\n        className=\"form-horizontal\"\n      >\n        <input\n          type=\"text\"\n          data-test=\"component-input-box\"\n          className=\"mb-2 mx-sm-3\"\n          placeholder=\"enter your guess\"\n          value={currentGuess}\n          onChange={(event) => this.setState({ currentGuess: event.target.value })}\n        />\n        <button\n          type=\"submit\"\n          data-test=\"component-submit-button\"\n          className=\"btn btn-primary mb-2\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n        <button\n          type=\"button\"\n          data-test=\"give-up-button\"\n          className=\"btn btn-danger ml-1 mb-2\"\n          onClick={giveUpGuess}\n        >\n          Give Up\n        </button>\n      </form>\n    );\n\n    return (\n      <div data-test=\"component-input\">\n        {contents}\n      </div>\n    );\n  }\n}\nUnconnectedInputComp.propTypes = {\n  success: PropTypes.bool,\n  guessWord: PropTypes.func,\n  giveUpGuess: PropTypes.func,\n};\nUnconnectedInputComp.defaultProps = {\n  success: false,\n  guessWord: () => { },\n  giveUpGuess: () => { },\n};\nconst actions = {\n  guessWord,\n  giveUpGuess,\n};\nexport default connect(mapStateToProps, actions)(UnconnectedInputComp);\n","import { bool, string } from 'prop-types';\nimport React from 'react';\n\nconst GiveUp = ({ giveUpGuess, secretWord }) => {\n  const contents = giveUpGuess\n    ? (\n      <div data-test=\"button-give-up-button\" className=\"container\">\n        <span data-test=\"message-give-up-button\" className=\"alert alert-danger\">\n          The secret word was\n          {' '}\n          <b>\n            {secretWord}\n          </b>\n          {'. '}\n          Better luck next time!\n        </span>\n      </div>\n    )\n    : <div data-test=\"button-give-up-button\" />;\n  return (\n    <div data-test=\"component-give-up-button\">\n      {contents}\n    </div>\n  );\n};\nGiveUp.propTypes = {\n  secretWord: string,\n  giveUpGuess: bool,\n};\nGiveUp.defaultProps = {\n  secretWord: 'Party',\n  giveUpGuess: false,\n};\n\nexport default GiveUp;\n","import React from 'react';\nimport { bool, func } from 'prop-types';\n\n// eslint-disable-next-line no-shadow\nconst NewWordButton = ({ display, reloadWebPage }) => (\n  <div data-test=\"component-new-word\">\n    {display\n      ? (\n        <button\n          type=\"button\"\n          className=\"btn-primary\"\n          data-test=\"button-new-word\"\n          // eslint-disable-next-line no-return-await\n          onClick={reloadWebPage}\n        >\n          New Word\n        </button>\n      )\n      : <div data-test=\"button-new-word\" />}\n  </div>\n);\nNewWordButton.propTypes = {\n  display: bool,\n  reloadWebPage: func,\n};\nNewWordButton.defaultProps = {\n  display: false,\n  reloadWebPage: () => { },\n};\n\nexport default NewWordButton;\n","import React from 'react';\nimport { bool, string } from 'prop-types';\n\nconst SecretWordLength = ({ secretWord, success, giveUpGuess }) => {\n  const contents = (\n    <code data-test=\"message-secret-word-length\">\n      {`The secret word has length of ${secretWord.length}`}\n    </code>\n  );\n  return (\n    <div data-test=\"component-secret-word-length\">\n      {(secretWord && !success && !giveUpGuess)\n        ? contents\n        : <></>}\n    </div>\n  );\n};\n\nSecretWordLength.propTypes = {\n  secretWord: string,\n  success: bool,\n  giveUpGuess: bool,\n};\nSecretWordLength.defaultProps = {\n  secretWord: 'Party',\n  success: false,\n  giveUpGuess: false,\n};\nexport default SecretWordLength;\n","import { bool, func } from 'prop-types';\nimport React from 'react';\n\nconst UserEntryButton = ({ display, userEntryBtnAction }) => {\n  const contents = display\n    ? (\n      <button type=\"button\" className=\"btn btn-primary\" data-test=\"user-entry-button\" onClick={userEntryBtnAction}>\n        Click to enter your value\n      </button>\n    )\n    : <div data-test=\"user-entry-button\" />;\n  return (\n    <div data-test=\"component-user-entry-button\">\n      {contents}\n    </div>\n  );\n};\nUserEntryButton.propTypes = {\n  display: bool,\n  userEntryBtnAction: func,\n};\nUserEntryButton.defaultProps = {\n  display: true,\n  userEntryBtnAction: () => { },\n};\n\nexport default UserEntryButton;\n","/* eslint-disable no-useless-constructor */\n/* eslint-disable react/destructuring-assignment */\nimport React, { createRef } from 'react';\nimport { func } from 'prop-types';\n\nclass UserEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.inputRef = createRef(); // useRef()\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.formAction(this.inputRef.current.value);\n  }\n\n  render() {\n    return (\n      <div data-test=\"component-User-Input-SSW\" className=\"mb-5 ml-3\">\n        <h1 data-test=\"instruction-User-Input-SSW\">Enter Secret word for User to guess</h1>\n        <form name=\"user-secret-word\" data-test=\"form-User-Input-SSW\" className=\"form-horizontal\">\n          <input\n            type=\"text\"\n            data-test=\"Input-Text-User-Input-SSW\"\n            ref={this.inputRef}\n            className=\"mb-2 mx-sm-3\"\n          />\n          <button\n            type=\"submit\"\n            data-test=\"Submit-Btn-User-Input-SSW\"\n            className=\"btn-primary\"\n            onClick={(e) => this.handleSubmit(e)}\n          >\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nUserEntry.propTypes = {\n  formAction: func.isRequired,\n};\n\nexport default UserEntry;\n\n/**\n * const UserEntry = () => {\n *  const inputRef = useRef();\n *  const handleSubmit = (event) => {\n      event.preventDefault();\n      this.props.formAction(this.inputRef.current);\n    }\n *  return (\n      <div data-test=\"component-User-Input-SSW\" className=\"mb-5 ml-3\">\n        <h1 data-test=\"instruction-User-Input-SSW\">Enter Secret word for User to guess</h1>\n        <form name=\"user-secret-word\" data-test=\"form-User-Input-SSW\" className=\"form-horizontal\">\n          <input\n            type=\"text\"\n            data-test=\"Input-Text-User-Input-SSW\"\n            ref={inputRef}\n            className=\"mb-2 mx-sm-3\"\n          />\n          <button\n            type=\"submit\"\n            data-test=\"Submit-Btn-User-Input-SSW\"\n            className=\"btn-primary\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n */\n","import React from 'react';\n\nconst message = 'There was an error retrieving the secret word. Please try again later.';\nconst ErrorComponent = () => {\n  const contents = (\n    <div data-test=\"component-error-message-div\">\n      <span className=\"alert alert-danger\" data-test=\"error-message\">\n        {message}\n      </span>\n    </div>\n  );\n  return (<div className=\"container\">{contents}</div>);\n};\nexport default ErrorComponent;\n","/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Congrats from './components/CongratsComponent/Congrats';\nimport GuessedWord from './components/GuessedWordComponent/GuessedWords';\nimport InputComp from './components/InputComponent/Input';\n\nimport GiveUp from './components/GiveUpButtonComponent/GiveUp';\nimport NewWordButton from './components/NewWordComponent/NewWord';\nimport SecretWordLength from './components/SecretWordLength/SecretWordLength';\nimport UserEntryButton from './components/UserEntersSecretWord/UserEntryButton/UserEntryButton';\nimport UserEntry from './components/UserEntersSecretWord/UserEntry';\nimport ErrorComponent, { } from './components/ErrorComponent/Error';\n\nimport './App.css';\nimport {\n  getSecretWord, reloadWebPage, setUserEnteredSecretWord, setUserSecretWordEntering,\n} from './actions';\n\nexport class UnconnectedApp extends React.Component {\n  componentDidMount() {\n    // eslint-disable-next-line no-shadow\n    const { getSecretWord } = this.props;\n    getSecretWord();\n  }\n\n  render() {\n    const {\n      // eslint-disable-next-line no-shadow\n      success, guessedWords, secretWord, reloadWebPage, giveUpGuess,\n      // eslint-disable-next-line no-shadow\n      userInput, setUserEnteredSecretWord, setUserSecretWordEntering, serverError,\n    } = this.props;\n    const displayingSecretWordLength = secretWord\n      && (\n        <SecretWordLength\n          secretWord={secretWord}\n          success={success}\n          giveUpGuess={giveUpGuess}\n        />\n      );\n    let contents;\n    if (serverError) {\n      contents = <ErrorComponent />;\n    } else {\n      contents = userInput === 'is_entering'\n        ? (<UserEntry formAction={setUserEnteredSecretWord} />)\n        : (\n          <>\n            {displayingSecretWordLength}\n            <Congrats success={success} />\n            <GiveUp giveUpGuess={giveUpGuess} secretWord={secretWord} />\n            <div className=\"mt-3 mb-3\">\n              <NewWordButton\n                display={success || giveUpGuess}\n                reloadWebPage={reloadWebPage}\n              />\n            </div>\n            <InputComp />\n            <GuessedWord guessedWords={guessedWords} />\n            <UserEntryButton\n              display={guessedWords.length === 0}\n              userEntryBtnAction={setUserSecretWordEntering}\n            />\n          </>\n        );\n    }\n    return (\n      <div className=\"App\">\n        <h1>Jotto</h1>\n        {contents}\n      </div>\n    );\n  }\n}\n\nUnconnectedApp.propTypes = {\n  success: PropTypes.bool,\n  giveUpGuess: PropTypes.bool,\n  serverError: PropTypes.bool,\n  guessedWords: PropTypes.arrayOf(\n    PropTypes.shape({\n      guessWord: PropTypes.string,\n      letterMatchCount: PropTypes.number,\n    }),\n  ),\n  getSecretWord: PropTypes.func,\n  reloadWebPage: PropTypes.func,\n  setUserEnteredSecretWord: PropTypes.func,\n  setUserSecretWordEntering: PropTypes.func,\n  secretWord: PropTypes.string,\n  userInput: PropTypes.string,\n};\nUnconnectedApp.defaultProps = {\n  success: false,\n  giveUpGuess: false,\n  serverError: false,\n  guessedWords: [{ guessWord: 'train', letterMatchCount: 3 }],\n  reloadWebPage: () => { },\n  setUserEnteredSecretWord: () => { },\n  setUserSecretWordEntering: () => { },\n  getSecretWord: () => { },\n  secretWord: 'Party',\n  userInput: null,\n};\nconst mapStateToProps = (state) => {\n  const {\n    success, guessedWords, secretWord, giveUpGuess, userInput, serverError,\n  } = state;\n  return {\n    success, guessedWords, secretWord, giveUpGuess, userInput, serverError,\n  };\n};\n\nconst actions = {\n  getSecretWord,\n  reloadWebPage,\n  setUserEnteredSecretWord,\n  setUserSecretWordEntering,\n};\nexport default connect(mapStateToProps, actions)(UnconnectedApp);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport success from './successReducer';\nimport guessedWords from './guessedWordReducer';\nimport secretWord from './secretWordReducer';\nimport giveUpGuess from './giveupGuessReducer';\nimport userInput from './userEnteredSecretWordReducer';\nimport serverError from './serverErrorReducer';\n\nexport default combineReducers({\n  success,\n  guessedWords,\n  secretWord,\n  giveUpGuess,\n  userInput,\n  serverError,\n});\n","import actionTypes from '../actions';\n\n/**\n * @function successReducer\n * @param  {boolean} state - current success state. if undefined then default is set to false.\n * @param  {object} action - Action to be reduced.\n * @returns {boolean} - New success state.\n */\nexport default (state = false, action) => {\n  switch (action.type) {\n    case (actionTypes.CORRECT_GUESS):\n      return true;\n    case (actionTypes.RESET_GAME):\n      return false;\n    default:\n      return state;\n  }\n};\n","import actionTypes from '../actions';\n/**\n * @function guessedWordReducer\n * @param  {boolean} state - current success state. if undefined then default is set to false.\n * @param  {object} action - Action to be reduced.\n * @returns {boolean} - New success state.\n */\nexport default (state = [], action) => {\n  switch (action.type) {\n    case actionTypes.GUESS_WORD:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n","import actionTypes from '../actions';\n\n/**\n * @function secretWordReducer\n * @param  {boolean} state - state before the Reducer. if undefined then default is set to null.\n * @param  {object} action - Action to be reduced.\n * @returns {boolean} - New success state. ie secret word.\n */\nexport default (state = null, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SECRET_WORD:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import actionTypes from '../actions';\n\n/**\n * @function giveUpGuessReducer\n * @param  {boolean} state - current success state. if undefined then default is set to false.\n * @param  {object} action - Action to be reduced.\n * @returns {boolean} - New success state.\n */\nexport default (state = false, action) => {\n  switch (action.type) {\n    case actionTypes.GIVEUP_GUESS:\n      return true;\n    case (actionTypes.RESET_GAME):\n      return false;\n    default:\n      return state;\n  }\n};\n","import actionTypes from '../actions';\n\nexport default (state = null, action) => {\n  switch (action.type) {\n    case actionTypes.USER_ENTERED:\n      return 'entered';\n    case actionTypes.USER_IS_ENTERING:\n      return 'is_entering';\n    case actionTypes.RESET_GAME:\n      return null;\n    default:\n      return state;\n  }\n};\n","import actionTypes from '../actions';\n\n/**\n * @function serverErrorReducer\n * @param  {boolean} state - state before the Reducer. if undefined then default is set to null.\n * @param  {object} action - Action to be reduced.\n * @returns {boolean} - New success state. ie secret word.\n */\nexport default (state = false, action) => {\n  switch (action.type) {\n    case actionTypes.SERVER_ERROR:\n      return true;\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\n\nexport const middleWares = [ReduxThunk];\nif (process.env.NODE_ENV === 'development') {\n  middleWares.push(logger);\n}\nexport default applyMiddleware(...middleWares)(createStore)(rootReducer);\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './configureStore';\n\nrequire('bootstrap/dist/css/bootstrap.min.css');\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}